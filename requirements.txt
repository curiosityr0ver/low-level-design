Functional Requirements
-Request ride
    -input source and destination
    -output ride details (nearby drivers ,estimated time of arrival, fare estimate)
-Ride Matching
    -match rider with driver
-Driver Tracking
    -track driver location in real-time
-Push Notifications
    -notify rider when driver is nearby
    -notify driver when ride is requested
    -notify rider when ride is completed


Non Functional Requirements
-Scalability
    -system should handle 100m+ concurrent users
-Performance
    -latency should respond to ride requests in under 2 seconds
-Reliability
    -system should have 99.9% uptime
-Data Security
    -user data should be encrypted
    -payment information should be securely stored


Future Enhancements
-Integration with public transport
    -allow users to book rides that connect with public transport
-Enhanced Driver Features
    -provide drivers with navigation assistance
-User Feedback System
    -allow users to rate drivers and provide feedback
In-app Chat
    -allow riders and drivers to communicate within the app


API Design

Rest API
    1. POST /api/fares/estimate
        -description: Estimate fare for a ride based on source and destination
        -params:
            -source: string (latitude,longitude)
            -destination: string (latitude,longitude)
        -output: fare estimate
    
    2. POST /api/rides/request
        -description: Request a ride after fare estimation
        -params:
            -pickup_location: string (latitude,longitude)
            -destination_location: string (latitude,longitude)
        -output: ride details (ride ID, driver ID, estimated time of arrival)

    3. PUT /api/rides/{rideId}/accept
        -description: Driver accepts a ride request
        -params:
            -rideId: string (ride ID)
            -driverId: string (driver ID)
        -output: updated ride details (status, driver location)


Long Polling
    